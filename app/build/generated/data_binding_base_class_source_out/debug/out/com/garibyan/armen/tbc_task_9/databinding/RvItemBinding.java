// Generated by view binder compiler. Do not edit!
package com.garibyan.armen.tbc_task_9.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.garibyan.armen.tbc_task_9.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RvItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final AppCompatImageButton btnDelete;

  @NonNull
  public final AppCompatImageButton btnEdit;

  @NonNull
  public final AppCompatTextView tvEmail;

  @NonNull
  public final AppCompatTextView tvName;

  @NonNull
  public final AppCompatTextView tvSurname;

  private RvItemBinding(@NonNull CardView rootView, @NonNull AppCompatImageButton btnDelete,
      @NonNull AppCompatImageButton btnEdit, @NonNull AppCompatTextView tvEmail,
      @NonNull AppCompatTextView tvName, @NonNull AppCompatTextView tvSurname) {
    this.rootView = rootView;
    this.btnDelete = btnDelete;
    this.btnEdit = btnEdit;
    this.tvEmail = tvEmail;
    this.tvName = tvName;
    this.tvSurname = tvSurname;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static RvItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RvItemBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.rv_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RvItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDelete;
      AppCompatImageButton btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnEdit;
      AppCompatImageButton btnEdit = ViewBindings.findChildViewById(rootView, id);
      if (btnEdit == null) {
        break missingId;
      }

      id = R.id.tvEmail;
      AppCompatTextView tvEmail = ViewBindings.findChildViewById(rootView, id);
      if (tvEmail == null) {
        break missingId;
      }

      id = R.id.tvName;
      AppCompatTextView tvName = ViewBindings.findChildViewById(rootView, id);
      if (tvName == null) {
        break missingId;
      }

      id = R.id.tvSurname;
      AppCompatTextView tvSurname = ViewBindings.findChildViewById(rootView, id);
      if (tvSurname == null) {
        break missingId;
      }

      return new RvItemBinding((CardView) rootView, btnDelete, btnEdit, tvEmail, tvName, tvSurname);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
